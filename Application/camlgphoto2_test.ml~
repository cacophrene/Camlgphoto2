(* camlgphoto2_test.ml - This file is part of camlgphoto2_test.linux *)

open Printf

let eos_zoom_factor = ref None
let eos_zoom_position = ref None

let update_zoom cam context config =
  let open GPWidget in
  match !eos_zoom_factor, !eos_zoom_position with
  | Some fac, Some pos ->
    let factor = ref false in
    ignore (GUI.events#event#connect#button_press (fun t ->
      if GUI.live_view#active then begin
        let _ = truncate (GdkEvent.Button.x t)
        and _ = truncate (GdkEvent.Button.y t) in
        factor := not !factor;
        set_value fac (GP_VALUE_STRING (if !factor then "5" else "1"));
        GPCamera.set_config cam context config
      end;
      false));
      true
  | _ -> false

let print_widgets cam context =
  let open GPWidget in
  let config = GPCamera.get_config cam context in
  let rec loop str actions = function
    | [] -> actions
    | w :: widgs -> let str' = Filename.concat str (get_name w) in
      printf "%s\n%!" str';
      if is_parent w then begin
        let actions' = 
          if str' = "/main/imgsettings" || str' = "/main/capturesettings" then
          GUI.add_section (get_label w) :: actions
          else actions
        in loop str (loop str' actions' (get_children w)) widgs
      end else match get_type w with
        | GP_WIDGET_RADIO when 
          str' = "/main/imgsettings/imageformat"              ||
          str' = "/main/capturesettings/picturestyle"         ||
          str' = "/main/capturesettings/drivemode"            ||
          str' = "/main/imgsettings/iso"                      ||
          str' = "/main/capturesettings/exposurecompensation" ||
          str' = "/main/imgsettings/whitebalance"             ||
          str' = "/main/capturesettings/shutterspeed"         ||
          str' = "/main/capturesettings/meteringmode"         ||
          str' = "/main/capturesettings/aperture"             ||
          str' = "/main/imgsettings/colorspace"               ||
          str' = "/main/capturesettings/aeb" ->
          let action () = 
            let current = string_of_value (get_value w)
            and choices = get_choices w in
            GUI.add_config ~label:(get_label w) ~current choices 
              (fun s -> set_value w (GP_VALUE_STRING s)) 
              (fun () -> GPCamera.set_config cam context config) 
          in loop str (action :: actions) widgs
        | GP_WIDGET_TEXT when str' = "/main/actions/eoszoom" ->
          loop str ((fun () -> eos_zoom_factor := Some w) :: actions) widgs      
        | GP_WIDGET_TEXT when str' = "/main/actions/eoszoomposition" ->
          loop str ((fun () -> eos_zoom_position := Some w) :: actions) widgs
        | GP_WIDGET_TEXT when str' = "/main/status/lensname" ->
          loop str (GUI.set_lens_name w :: actions) widgs
        | _ -> loop str actions widgs
  in List.iter (fun f -> f ()) (List.rev (loop "/" [] [config]));
  update_zoom cam context config

let initialize models context =
  match GPMain.detect models context with
  | [] -> printf "No camera available! Please check your connection\n"; None
  | (model, port_info) :: _ -> let camera = GPCamera.create () in
    GUI.set_camera_model model;
    print_widgets camera context;
    let abilities = GPMain.get_abilities ~model models in
    GPMain.destroy models;
    GPCamera.set_abilities camera abilities;
    GPCamera.set_port_info camera port_info;
    GPCamera.init camera;
    Some camera

let _ =
  Param.
  let main () =
    Printexc.record_backtrace true;
    let context = GPContext.create () in
    let models = GPMain.load context in
    Gaux.may (fun cam -> let open GUI in
      main_window#connect#destroy (Action.close_application cam models context);
      live_view#connect#toggled (Action.may_preview cam context);
      take_shot#connect#clicked (Action.get_picture cam context);
      toolbox#show ();
      main_window#show ();
      GMain.main ()
    ) (initialize models context) in
  try main () with exn -> let open Printexc in
    printf "There was a problem... please add the following backtrace \
      to your bug report:\n%s\n%s" (to_string exn) (get_backtrace ())
